{
  "events": [
    {
      "start_date": {
        "year": "1",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "1",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": ""
      },
      "text": {
        "headline": "Pruebas Unitarias",
        "text": "<b>¿Qué son?</b> <br> Es una forma de comprobar el correcto funcionamiento de una unidad de código. <br> <b>¿Para que sirven?</b> <br> Son casos de pruebas que permiten verificar cada función o método en un módulo en particular <br> <b>Objetivo</b><br> El objetivo de las pruebas unitarias es aislar cada parte del programa y mostrar que las partes individuales son correctas. Proporcionan un contrato escrito que el trozo de código debe satisfacer."
      }
    },
    {
      "start_date": {
        "year": "2",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "2",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": ""
      },
      "text": {
        "headline": "Realizar pruebas",
        "text": "<b>Librerías</b> <br> Para nuestro en caso en python, se utiliza la librería <b>unittest</b> que por defecto ya viene con el lenguaje, y adicional a ello el framework <b>Django</b> tiene su propia implementación de la librería donde a parte de contener todas sus funcionalidades, también agrega funcionalidades inherentes a las pruebas de una web."
      }
    },
    {
      "start_date": {
        "year": "3",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "3",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": "img/ex1.png"
      },
      "text": {
        "headline": "¿Cómo se programan?",
        "text": "La programación de pruebas unitarias se basan en la creación de <b>Casos de Prueba</b> que comprendan de manera atómica una funcionalidad particular del sistema, pasa así comprobar de acuerdo a la especificación de las funcionalidades si cumplen con lo esperado."
      }
    },
    {
      "start_date": {
        "year": "4",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "4",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": "img/ex2.png"
      },
      "text": {
        "headline": "Casos de prueba",
        "text": "Nuestros casos de prueba son simplemente clases que heredan de otra clase de la prueba unitaria con métodos predefinidos para realizar nuestras pruebas, en nuestro caso para django debemos conocer un método fundamental que es el <b>setUp</b> en el cual configuramos los valores iniciales de nuestro caso de prueba, así como también debemos conocer que todo método definido en nuestro archivo de pruebas que comience con <b>test_</b> se ejecutará dentro del caso de prueba."
      }
    },
    {
      "start_date": {
        "year": "5",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "5",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": "img/ex3.png"
      },
      "text": {
        "headline": "Métodos Assert",
        "text": "Éstos métodos son los que nos permiten verificar la validez de varias funcionalidades a probar en nuestros casos de prueba. <br> Aparte de los existentes, Django también contiene sus propios assert, como por ejemplo: <b>assertFieldOutput, assertFormError, assertContains, assertTemplateUsed, assertRedirects</b> y muchos otras explicadas en la documentación."
      }
    },
    {
      "start_date": {
        "year": "6",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "6",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": "img/cod1.png"
      },
      "text": {
        "headline": "Probar un módelo",
        "text": "En el código presentado se prepara el test case con datos iniciales y se procede a crear el modelo."
      }
    },
    {
      "start_date": {
        "year": "7",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "7",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": "img/cod2.png"
      },
      "text": {
        "headline": "Probar listar y crear",
        "text": "El código presentado es continuación del caso de prueba anterior y se prueba la vista de listar y la vista más la acción de crear."
      }
    },
    {
      "start_date": {
        "year": "8",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "8",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": "img/cod3.png"
      },
      "text": {
        "headline": "Probar actualizar y eliminar",
        "text": "El código presentado es continuación del caso de prueba anterior y se prueba la acción de actualizar y eliminar."
      }
    },
    {
      "start_date": {
        "year": "9",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "9",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": "img/res1.png"
      },
      "text": {
        "headline": "Nuevo caso de prueba, rest",
        "text": "Ahora se realizarán pruebas con servicios rest, donde la lógica es muy similar, pero algunas partes de la implementación son distintas, cómo de costumbre se debe configurar en el <b>setUp</b>, y aquí vemos como se prueba el listado de registros."
      }
    },
    {
      "start_date": {
        "year": "10",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "10",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": "img/res2.png"
      },
      "text": {
        "headline": "Probar crear, actualizar y eliminar",
        "text": "Siguiendo con el ejemplo de los rest, en el código al lado se muestra una prueba sencilla de creación, actualización y borrado."
      }
    },
    {
      "start_date": {
        "year": "11",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "end_date": {
        "year": "11",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": "",
        "millisecond": "",
        "format": ""
      },
      "background": {
        "color": "black",
        "opacity": 50,
        "url": null
      },
      "media": {
        "caption": "",
        "credit": "",
        "url": ""
      },
      "text": {
        "headline": "¿Qué es lo siguiente?",
        "text": "Realmente el mundo de las pruebas unitarias es un mundo totalmente aparte, donde el límite de las pruebas, o lo minuciosas que pueden ser depende del equipo de pruebas, ya que se puede probar una infinidad de cosas para verificar una simple funcionalidad.<br>Ahora, respondiendo a la pregunta, <b>¿qué sigue?</b>, éstas son simplemente pruebas en el backend, faltarían implementar pruebas en el código del frontend, y llevar las pruebas unitarias a otro nivel convirtiéndolas en pruebas automatizadas."
      }
    }
  ]
}